type QuestionnaireQuestionAnswer @aws_iam @aws_api_key {
  id: ID!
  questionID: ID
  answerID: String
  questionnaireID: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Answers(filter: ModelAnswerFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAnswerConnection @aws_iam @aws_api_key
  Questions(filter: ModelQuestionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelQuestionConnection @aws_iam @aws_api_key
  Questionnaire: Questionnaire @aws_iam @aws_api_key
}

type Answer @aws_iam @aws_api_key {
  id: ID!
  answer: String
  questionnaireID: ID
  questionID: ID
  questionnairequestionanswerID: ID
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Questionnaire: QuestionnaireQuestionAnswer @aws_iam @aws_api_key
  Question: QuestionnaireQuestionAnswer @aws_iam @aws_api_key
  QuestionnaireQuestionAnswer: QuestionnaireQuestionAnswer @aws_iam @aws_api_key
}

type Question @aws_iam @aws_api_key {
  id: ID!
  question: String
  questionName: String
  questionnairequestionanswerID: ID
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  QuestionnaireQuestionAnswers(filter: ModelQuestionnaireQuestionAnswerFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelQuestionnaireQuestionAnswerConnection @aws_iam @aws_api_key
  Answers(filter: ModelAnswerFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAnswerConnection @aws_iam @aws_api_key
}

type Questionnaire @aws_iam @aws_api_key {
  id: ID!
  questionaireCompleted: Boolean
  questionnaireQuestionanswerID: ID
  userId: ID
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  QuestionnaireQuestionAnswer: QuestionnaireQuestionAnswer @aws_iam @aws_api_key
  Answers(filter: ModelAnswerFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAnswerConnection @aws_iam @aws_api_key
  User: User @aws_iam @aws_api_key
}

type User @aws_iam @aws_api_key {
  id: ID!
  first_name: String
  last_name: String
  email: String
  job_title: String
  company: String
  employees: String
  industry: String
  country: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  Questionnaire: QuestionnaireQuestionAnswer @aws_iam @aws_api_key
}

type File @aws_iam @aws_api_key {
  id: ID!
  data: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelQuestionnaireQuestionAnswerConnection @aws_api_key @aws_iam {
  items: [QuestionnaireQuestionAnswer]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelQuestionnaireQuestionAnswerFilterInput {
  id: ModelIDInput
  questionID: ModelIDInput
  answerID: ModelStringInput
  questionnaireID: ModelStringInput
  and: [ModelQuestionnaireQuestionAnswerFilterInput]
  or: [ModelQuestionnaireQuestionAnswerFilterInput]
  not: ModelQuestionnaireQuestionAnswerFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getQuestionnaireQuestionAnswer(id: ID!): QuestionnaireQuestionAnswer @aws_api_key @aws_iam
  listQuestionnaireQuestionAnswers(filter: ModelQuestionnaireQuestionAnswerFilterInput, limit: Int, nextToken: String): ModelQuestionnaireQuestionAnswerConnection @aws_api_key @aws_iam
  syncQuestionnaireQuestionAnswers(filter: ModelQuestionnaireQuestionAnswerFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelQuestionnaireQuestionAnswerConnection @aws_api_key @aws_iam
  getAnswer(id: ID!): Answer @aws_api_key @aws_iam
  listAnswers(filter: ModelAnswerFilterInput, limit: Int, nextToken: String): ModelAnswerConnection @aws_api_key @aws_iam
  syncAnswers(filter: ModelAnswerFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAnswerConnection @aws_api_key @aws_iam
  getQuestion(id: ID!): Question @aws_api_key @aws_iam
  listQuestions(filter: ModelQuestionFilterInput, limit: Int, nextToken: String): ModelQuestionConnection @aws_api_key @aws_iam
  syncQuestions(filter: ModelQuestionFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelQuestionConnection @aws_api_key @aws_iam
  getQuestionnaire(id: ID!): Questionnaire @aws_api_key @aws_iam
  listQuestionnaires(filter: ModelQuestionnaireFilterInput, limit: Int, nextToken: String): ModelQuestionnaireConnection @aws_api_key @aws_iam
  syncQuestionnaires(filter: ModelQuestionnaireFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelQuestionnaireConnection @aws_api_key @aws_iam
  getUser(id: ID!): User @aws_api_key @aws_iam
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_api_key @aws_iam
  syncUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelUserConnection @aws_api_key @aws_iam
  getFile(id: ID!): File @aws_api_key @aws_iam
  listFiles(filter: ModelFileFilterInput, limit: Int, nextToken: String): ModelFileConnection @aws_api_key @aws_iam
  syncFiles(filter: ModelFileFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelFileConnection @aws_api_key @aws_iam
}

input CreateQuestionnaireQuestionAnswerInput {
  id: ID
  questionID: ID
  answerID: String
  questionnaireID: String
  _version: Int
  questionnaireQuestionAnswerQuestionnaireId: ID
}

input UpdateQuestionnaireQuestionAnswerInput {
  id: ID!
  questionID: ID
  answerID: String
  questionnaireID: String
  _version: Int
  questionnaireQuestionAnswerQuestionnaireId: ID
}

input DeleteQuestionnaireQuestionAnswerInput {
  id: ID!
  _version: Int
}

type Mutation {
  createQuestionnaireQuestionAnswer(input: CreateQuestionnaireQuestionAnswerInput!, condition: ModelQuestionnaireQuestionAnswerConditionInput): QuestionnaireQuestionAnswer @aws_api_key @aws_iam
  updateQuestionnaireQuestionAnswer(input: UpdateQuestionnaireQuestionAnswerInput!, condition: ModelQuestionnaireQuestionAnswerConditionInput): QuestionnaireQuestionAnswer @aws_api_key @aws_iam
  deleteQuestionnaireQuestionAnswer(input: DeleteQuestionnaireQuestionAnswerInput!, condition: ModelQuestionnaireQuestionAnswerConditionInput): QuestionnaireQuestionAnswer @aws_api_key @aws_iam
  createAnswer(input: CreateAnswerInput!, condition: ModelAnswerConditionInput): Answer @aws_api_key @aws_iam
  updateAnswer(input: UpdateAnswerInput!, condition: ModelAnswerConditionInput): Answer @aws_api_key @aws_iam
  deleteAnswer(input: DeleteAnswerInput!, condition: ModelAnswerConditionInput): Answer @aws_api_key @aws_iam
  createQuestion(input: CreateQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
  updateQuestion(input: UpdateQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
  deleteQuestion(input: DeleteQuestionInput!, condition: ModelQuestionConditionInput): Question @aws_api_key @aws_iam
  createQuestionnaire(input: CreateQuestionnaireInput!, condition: ModelQuestionnaireConditionInput): Questionnaire @aws_api_key @aws_iam
  updateQuestionnaire(input: UpdateQuestionnaireInput!, condition: ModelQuestionnaireConditionInput): Questionnaire @aws_api_key @aws_iam
  deleteQuestionnaire(input: DeleteQuestionnaireInput!, condition: ModelQuestionnaireConditionInput): Questionnaire @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
  createFile(input: CreateFileInput!, condition: ModelFileConditionInput): File @aws_api_key @aws_iam
  updateFile(input: UpdateFileInput!, condition: ModelFileConditionInput): File @aws_api_key @aws_iam
  deleteFile(input: DeleteFileInput!, condition: ModelFileConditionInput): File @aws_api_key @aws_iam
}

input ModelQuestionnaireQuestionAnswerConditionInput {
  questionID: ModelIDInput
  answerID: ModelStringInput
  questionnaireID: ModelStringInput
  and: [ModelQuestionnaireQuestionAnswerConditionInput]
  or: [ModelQuestionnaireQuestionAnswerConditionInput]
  not: ModelQuestionnaireQuestionAnswerConditionInput
}

type Subscription {
  onCreateQuestionnaireQuestionAnswer: QuestionnaireQuestionAnswer @aws_subscribe(mutations: ["createQuestionnaireQuestionAnswer"]) @aws_api_key @aws_iam
  onUpdateQuestionnaireQuestionAnswer: QuestionnaireQuestionAnswer @aws_subscribe(mutations: ["updateQuestionnaireQuestionAnswer"]) @aws_api_key @aws_iam
  onDeleteQuestionnaireQuestionAnswer: QuestionnaireQuestionAnswer @aws_subscribe(mutations: ["deleteQuestionnaireQuestionAnswer"]) @aws_api_key @aws_iam
  onCreateAnswer: Answer @aws_subscribe(mutations: ["createAnswer"]) @aws_api_key @aws_iam
  onUpdateAnswer: Answer @aws_subscribe(mutations: ["updateAnswer"]) @aws_api_key @aws_iam
  onDeleteAnswer: Answer @aws_subscribe(mutations: ["deleteAnswer"]) @aws_api_key @aws_iam
  onCreateQuestion: Question @aws_subscribe(mutations: ["createQuestion"]) @aws_api_key @aws_iam
  onUpdateQuestion: Question @aws_subscribe(mutations: ["updateQuestion"]) @aws_api_key @aws_iam
  onDeleteQuestion: Question @aws_subscribe(mutations: ["deleteQuestion"]) @aws_api_key @aws_iam
  onCreateQuestionnaire: Questionnaire @aws_subscribe(mutations: ["createQuestionnaire"]) @aws_api_key @aws_iam
  onUpdateQuestionnaire: Questionnaire @aws_subscribe(mutations: ["updateQuestionnaire"]) @aws_api_key @aws_iam
  onDeleteQuestionnaire: Questionnaire @aws_subscribe(mutations: ["deleteQuestionnaire"]) @aws_api_key @aws_iam
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_api_key @aws_iam
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_api_key @aws_iam
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_api_key @aws_iam
  onCreateFile: File @aws_subscribe(mutations: ["createFile"]) @aws_api_key @aws_iam
  onUpdateFile: File @aws_subscribe(mutations: ["updateFile"]) @aws_api_key @aws_iam
  onDeleteFile: File @aws_subscribe(mutations: ["deleteFile"]) @aws_api_key @aws_iam
}

type ModelAnswerConnection @aws_api_key @aws_iam {
  items: [Answer]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAnswerFilterInput {
  id: ModelIDInput
  answer: ModelStringInput
  questionnaireID: ModelIDInput
  questionID: ModelIDInput
  questionnairequestionanswerID: ModelIDInput
  and: [ModelAnswerFilterInput]
  or: [ModelAnswerFilterInput]
  not: ModelAnswerFilterInput
}

input CreateAnswerInput {
  id: ID
  answer: String
  questionnaireID: ID
  questionID: ID
  questionnairequestionanswerID: ID
  _version: Int
  answerQuestionnaireId: ID
  answerQuestionId: ID
  answerQuestionnaireQuestionAnswerId: ID
}

input UpdateAnswerInput {
  id: ID!
  answer: String
  questionnaireID: ID
  questionID: ID
  questionnairequestionanswerID: ID
  _version: Int
  answerQuestionnaireId: ID
  answerQuestionId: ID
  answerQuestionnaireQuestionAnswerId: ID
}

input DeleteAnswerInput {
  id: ID!
  _version: Int
}

input ModelAnswerConditionInput {
  answer: ModelStringInput
  questionnaireID: ModelIDInput
  questionID: ModelIDInput
  questionnairequestionanswerID: ModelIDInput
  and: [ModelAnswerConditionInput]
  or: [ModelAnswerConditionInput]
  not: ModelAnswerConditionInput
}

type ModelQuestionConnection @aws_api_key @aws_iam {
  items: [Question]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelQuestionFilterInput {
  id: ModelIDInput
  question: ModelStringInput
  questionName: ModelStringInput
  questionnairequestionanswerID: ModelIDInput
  and: [ModelQuestionFilterInput]
  or: [ModelQuestionFilterInput]
  not: ModelQuestionFilterInput
}

input CreateQuestionInput {
  id: ID
  question: String
  questionName: String
  questionnairequestionanswerID: ID
  _version: Int
}

input UpdateQuestionInput {
  id: ID!
  question: String
  questionName: String
  questionnairequestionanswerID: ID
  _version: Int
}

input DeleteQuestionInput {
  id: ID!
  _version: Int
}

input ModelQuestionConditionInput {
  question: ModelStringInput
  questionName: ModelStringInput
  questionnairequestionanswerID: ModelIDInput
  and: [ModelQuestionConditionInput]
  or: [ModelQuestionConditionInput]
  not: ModelQuestionConditionInput
}

type ModelQuestionnaireConnection @aws_api_key @aws_iam {
  items: [Questionnaire]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelQuestionnaireFilterInput {
  id: ModelIDInput
  questionaireCompleted: ModelBooleanInput
  questionnaireQuestionanswerID: ModelIDInput
  userId: ModelIDInput
  and: [ModelQuestionnaireFilterInput]
  or: [ModelQuestionnaireFilterInput]
  not: ModelQuestionnaireFilterInput
}

input CreateQuestionnaireInput {
  id: ID
  questionaireCompleted: Boolean
  questionnaireQuestionanswerID: ID
  userId: ID
  _version: Int
  questionnaireUserId: ID
  questionnaireQuestionnaireQuestionAnswerId: ID
}

input UpdateQuestionnaireInput {
  id: ID!
  questionaireCompleted: Boolean
  questionnaireQuestionanswerID: ID
  userId: ID
  _version: Int
  questionnaireUserId: ID
  questionnaireQuestionnaireQuestionAnswerId: ID
}

input DeleteQuestionnaireInput {
  id: ID!
  _version: Int
}

input ModelQuestionnaireConditionInput {
  questionaireCompleted: ModelBooleanInput
  questionnaireQuestionanswerID: ModelIDInput
  userId: ModelIDInput
  and: [ModelQuestionnaireConditionInput]
  or: [ModelQuestionnaireConditionInput]
  not: ModelQuestionnaireConditionInput
}

type ModelUserConnection @aws_api_key @aws_iam {
  items: [User]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelUserFilterInput {
  id: ModelIDInput
  first_name: ModelStringInput
  last_name: ModelStringInput
  email: ModelStringInput
  job_title: ModelStringInput
  company: ModelStringInput
  employees: ModelStringInput
  industry: ModelStringInput
  country: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  first_name: String
  last_name: String
  email: String
  job_title: String
  company: String
  employees: String
  industry: String
  country: String
  _version: Int
  userQuestionnaireId: ID
}

input UpdateUserInput {
  id: ID!
  first_name: String
  last_name: String
  email: String
  job_title: String
  company: String
  employees: String
  industry: String
  country: String
  _version: Int
  userQuestionnaireId: ID
}

input DeleteUserInput {
  id: ID!
  _version: Int
}

input ModelUserConditionInput {
  first_name: ModelStringInput
  last_name: ModelStringInput
  email: ModelStringInput
  job_title: ModelStringInput
  company: ModelStringInput
  employees: ModelStringInput
  industry: ModelStringInput
  country: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type ModelFileConnection @aws_api_key @aws_iam {
  items: [File]
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelFileFilterInput {
  data: ModelStringInput
  and: [ModelFileFilterInput]
  or: [ModelFileFilterInput]
  not: ModelFileFilterInput
}

input CreateFileInput {
  id: ID
  data: String
  _version: Int
}

input UpdateFileInput {
  data: String
  _version: Int
}

input DeleteFileInput {
  id: ID!
  _version: Int
}

input ModelFileConditionInput {
  data: ModelStringInput
  and: [ModelFileConditionInput]
  or: [ModelFileConditionInput]
  not: ModelFileConditionInput
}
